test_derivative = @(x) 3*(x.^2)/100 - 2*x/8 + 2 +(6/2)*cos(x/2+6) - exp(x/6)/6;
run_iteration(@test_function,test_derivative);
function run_iteration(fun,dfun)
%RUN_ITERATIONS Summary of this function goes here
%   Detailed explanation goes here
    iterations = 100;
    bound = 5;
    start_guesses = bound*(rand([iterations,1])-0.5);
    root = bisection_solver(fun, -bound, bound);
    disp(root)
    xn = [];
    xn1 = [];
    n = [];
    for i=1:iterations
        n=[n,i];
        bisection_solver(fun, start_guesses+)
    end
end

function output = test_function(x)
    %declare input_list as a global variable
    global input_list;
    %append the current input to input_list
    %formatted so this works even if x is a column vector instead of a scalar
    input_list(:,end+1) = x;
    %perform the rest of the computation to generate output
    %I just put in a quadratic function as an example
    output = (x.^3)/100 - (x.^2)/8 + 2*x + 6*sin(x/2+6) -.7 - exp(x/6);
end